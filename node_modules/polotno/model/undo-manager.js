"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.UndoManager=void 0;const mobx_state_tree_1=require("mobx-state-tree");exports.UndoManager=mobx_state_tree_1.types.model("UndoManager",{history:mobx_state_tree_1.types.array(mobx_state_tree_1.types.frozen()),undoIdx:-1,targetPath:""}).views((t=>({get canUndo(){return t.undoIdx>0},get canRedo(){return t.undoIdx<t.history.length-1}}))).actions((t=>{let e,o,r=!1,a=null,n=0,s=!1;function d(){const t=(0,mobx_state_tree_1.getSnapshot)(e);return{pages:t.pages,width:t.width,height:t.height}}function i(t){(0,mobx_state_tree_1.applySnapshot)(e.pages,t.pages),e.setSize(t.width,t.height)}return{startTransaction(){s=!0},endTransaction(t){s=!1,t||this.requestAddState(d())},async ignore(e){t.startTransaction();try{await e()}catch(t){setTimeout((()=>{throw t}))}t.endTransaction(!0),n=0,clearTimeout(n)},async transaction(e){await t.ignore(e),this.addUndoState()},requestAddState(t){a=t,n||s||(r?r=!1:n=setTimeout((()=>{n=0,clearTimeout(n),s||this.addUndoState()}),100))},addUndoState(){if(r)return void(r=!1);const e=t.history[t.undoIdx];JSON.stringify(e)!==JSON.stringify(a)&&(t.history.splice(t.undoIdx+1),t.history.push(a),t.undoIdx=t.history.length-1)},afterCreate(){if(e=(0,mobx_state_tree_1.resolvePath)(t,".."),!e)throw new Error("Failed to find target store for UndoManager. Please provide `targetPath` property, or a `targetStore` in the environment");o=(0,mobx_state_tree_1.onSnapshot)(e,(()=>this.requestAddState(d()))),0===t.history.length&&this.requestAddState(d())},clear(){clearTimeout(n),n=0,t.history.splice(0,t.history.length),t.undoIdx=-1,t.addUndoState(d())},beforeDestroy(){o()},undo(){n&&this.addUndoState(),t.canUndo?(t.undoIdx--,r=!0,i(t.history[t.undoIdx])):console.warn("No undo history. Please check `store.history.canUndo` before calling undo action.")},redo(){n&&this.addUndoState(),t.canRedo?(t.undoIdx++,r=!0,i(t.history[t.undoIdx])):console.warn("No redo history. Please check `store.history.canRedo` before calling redo action.")},replaceState(){t.history[t.undoIdx]=d()}}})),exports.default=exports.UndoManager;
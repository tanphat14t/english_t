import { State as PopperState, PositioningStrategy } from "@popperjs/core";
import * as React from "react";
import { AbstractPureComponent2, IRef } from "@blueprintjs/core";
import { Popover2SharedProps } from "./popover2SharedProps";
export declare const Popover2InteractionKind: {
    CLICK: "click";
    CLICK_TARGET_ONLY: "click-target";
    HOVER: "hover";
    HOVER_TARGET_ONLY: "hover-target";
};
export declare type Popover2InteractionKind = typeof Popover2InteractionKind[keyof typeof Popover2InteractionKind];
export declare type Popover2Props<TProps = React.HTMLProps<HTMLElement>> = IPopover2Props<TProps>;
/** @deprecated use Popover2Props */
export interface IPopover2Props<TProps = React.HTMLProps<HTMLElement>> extends Popover2SharedProps<TProps> {
    /** HTML props for the backdrop element. Can be combined with `backdropClassName`. */
    backdropProps?: React.HTMLProps<HTMLDivElement>;
    /**
     * The content displayed inside the popover.
     */
    content?: string | JSX.Element;
    /**
     * Whether the wrapper and target should take up the full width of their container.
     * Note that supplying `true` for this prop will force  `targetTagName="div"`.
     */
    fill?: boolean;
    /**
     * The kind of interaction that triggers the display of the popover.
     *
     * @default "click"
     */
    interactionKind?: Popover2InteractionKind;
    /**
     * Enables an invisible overlay beneath the popover that captures clicks and
     * prevents interaction with the rest of the document until the popover is
     * closed. This prop is only available when `interactionKind` is
     * `PopoverInteractionKind.CLICK`. When popovers with backdrop are opened,
     * they become focused.
     *
     * @default false
     */
    hasBackdrop?: boolean;
    /**
     * Ref supplied to the `Classes.POPOVER` element.
     */
    popoverRef?: IRef<HTMLElement>;
    /**
     * Popper.js positioning strategy.
     *
     * @see https://popper.js.org/docs/v2/constructors/#strategy
     * @default "absolute"
     */
    positioningStrategy?: PositioningStrategy;
}
export interface IPopover2State {
    isOpen: boolean;
    hasDarkParent: boolean;
}
/**
 * @template T target component props inteface
 */
export declare class Popover2<T> extends AbstractPureComponent2<Popover2Props<T>, IPopover2State> {
    static displayName: string;
    static defaultProps: Popover2Props;
    state: IPopover2State;
    /**
     * DOM element that contains the popover.
     * When `usePortal={true}`, this element will be portaled outside the usual DOM flow,
     * so this reference can be very useful for testing.
     */
    popoverElement: HTMLElement | null;
    /** DOM element that contains the target. */
    targetElement: HTMLElement | null;
    /** Popover ref handler */
    private popoverRef;
    /** Target ref handler */
    private targetRef;
    private cancelOpenTimeout?;
    private isMouseInTargetOrPopover;
    private lostFocusOnSamePage;
    private popperScheduleUpdate?;
    private isControlled;
    private isArrowEnabled;
    private isHoverInteractionKind;
    private getPopoverElement;
    private getIsOpen;
    render(): JSX.Element | null;
    componentDidMount(): void;
    componentDidUpdate(props: Popover2Props<T>, state: IPopover2State): void;
    protected validateProps(props: Popover2Props & {
        children?: React.ReactNode;
    }): void;
    /**
     * Instance method to instruct the `Popover` to recompute its position.
     *
     * This method should only be used if you are updating the target in a way
     * that does not cause it to re-render, such as changing its _position_
     * without changing its _size_ (since `Popover` already repositions when it
     * detects a resize).
     */
    reposition: () => Promise<Partial<PopperState> | null> | undefined;
    private renderTarget;
    private renderPopover;
    private getPopperModifiers;
    private handleTargetFocus;
    private handleTargetBlur;
    private handleTargetContextMenu;
    private handleMouseEnter;
    private handleMouseLeave;
    private handlePopoverClick;
    private handleOverlayClose;
    private handleTargetClick;
    private setOpenState;
    private updateDarkParent;
    private isElementInPopover;
}
